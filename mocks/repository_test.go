// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/usecase/port/port.go

// Package mock_port is a generated GoMock package.
package mocks

import (
	domain "meli-items-w2/internal/core/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockItemRepository) AddItem(item domain.Item) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", item)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockItemRepositoryMockRecorder) AddItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockItemRepository)(nil).AddItem), item)
}

// DeleteItem mocks base method.
func (m *MockItemRepository) DeleteItem(id int) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", id)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemRepositoryMockRecorder) DeleteItem(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemRepository)(nil).DeleteItem), id)
}

// GetDB mocks base method.
func (m *MockItemRepository) GetDB() []domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].([]domain.Item)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockItemRepositoryMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockItemRepository)(nil).GetDB))
}

// GetItemByCode mocks base method.
func (m *MockItemRepository) GetItemByCode(code string) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByCode", code)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// GetItemByCode indicates an expected call of GetItemByCode.
func (mr *MockItemRepositoryMockRecorder) GetItemByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByCode", reflect.TypeOf((*MockItemRepository)(nil).GetItemByCode), code)
}

// GetItemById mocks base method.
func (m *MockItemRepository) GetItemById(id int) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", id)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockItemRepositoryMockRecorder) GetItemById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockItemRepository)(nil).GetItemById), id)
}

// GetNextId mocks base method.
func (m *MockItemRepository) GetNextId() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextId")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNextId indicates an expected call of GetNextId.
func (mr *MockItemRepositoryMockRecorder) GetNextId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextId", reflect.TypeOf((*MockItemRepository)(nil).GetNextId))
}

// ListItem mocks base method.
func (m *MockItemRepository) ListItem(status string) []domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItem", status)
	ret0, _ := ret[0].([]domain.Item)
	return ret0
}

// ListItem indicates an expected call of ListItem.
func (mr *MockItemRepositoryMockRecorder) ListItem(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItem", reflect.TypeOf((*MockItemRepository)(nil).ListItem), status)
}

// UpdateItem mocks base method.
func (m *MockItemRepository) UpdateItem(item domain.Item, id int) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", item, id)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemRepositoryMockRecorder) UpdateItem(item, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemRepository)(nil).UpdateItem), item, id)
}
