// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/usecase/usecase.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
	domain "meli-items-w2/internal/core/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItemUsecase is a mock of ItemUsecase interface.
type MockItemUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockItemUsecaseMockRecorder
}

// MockItemUsecaseMockRecorder is the mock recorder for MockItemUsecase.
type MockItemUsecaseMockRecorder struct {
	mock *MockItemUsecase
}

// NewMockItemUsecase creates a new mock instance.
func NewMockItemUsecase(ctrl *gomock.Controller) *MockItemUsecase {
	mock := &MockItemUsecase{ctrl: ctrl}
	mock.recorder = &MockItemUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemUsecase) EXPECT() *MockItemUsecaseMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockItemUsecase) AddItem(item domain.Item) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", item)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockItemUsecaseMockRecorder) AddItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockItemUsecase)(nil).AddItem), item)
}

// DeleteItem mocks base method.
func (m *MockItemUsecase) DeleteItem(id int) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", id)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemUsecaseMockRecorder) DeleteItem(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemUsecase)(nil).DeleteItem), id)
}

// GetItemById mocks base method.
func (m *MockItemUsecase) GetItemById(id int) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", id)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockItemUsecaseMockRecorder) GetItemById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockItemUsecase)(nil).GetItemById), id)
}

// ListItem mocks base method.
func (m *MockItemUsecase) ListItem(status string) []domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItem", status)
	ret0, _ := ret[0].([]domain.Item)
	return ret0
}

// ListItem indicates an expected call of ListItem.
func (mr *MockItemUsecaseMockRecorder) ListItem(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItem", reflect.TypeOf((*MockItemUsecase)(nil).ListItem), status)
}

// UpdateItem mocks base method.
func (m *MockItemUsecase) UpdateItem(item domain.Item, id int) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", item, id)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemUsecaseMockRecorder) UpdateItem(item, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemUsecase)(nil).UpdateItem), item, id)
}
