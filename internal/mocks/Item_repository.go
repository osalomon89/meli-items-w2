// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	domain "meli-items-w2/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// ItemRepository is an autogenerated mock type for the ItemRepository type
type ItemRepository struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: item
func (_m *ItemRepository) AddItem(item domain.Item) *domain.Item {
	ret := _m.Called(item)

	var r0 *domain.Item
	if rf, ok := ret.Get(0).(func(domain.Item) *domain.Item); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Item)
		}
	}

	return r0
}

// DeleteItem provides a mock function with given fields: id
func (_m *ItemRepository) DeleteItem(id int) *domain.Item {
	ret := _m.Called(id)

	var r0 *domain.Item
	if rf, ok := ret.Get(0).(func(int) *domain.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Item)
		}
	}

	return r0
}

// GetDB provides a mock function with given fields:
func (_m *ItemRepository) GetDB() []domain.Item {
	ret := _m.Called()

	var r0 []domain.Item
	if rf, ok := ret.Get(0).(func() []domain.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Item)
		}
	}

	return r0
}

// GetItemByCode provides a mock function with given fields: code
func (_m *ItemRepository) GetItemByCode(code string) *domain.Item {
	ret := _m.Called(code)

	var r0 *domain.Item
	if rf, ok := ret.Get(0).(func(string) *domain.Item); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Item)
		}
	}

	return r0
}

// GetItemById provides a mock function with given fields: id
func (_m *ItemRepository) GetItemById(id int) *domain.Item {
	ret := _m.Called(id)

	var r0 *domain.Item
	if rf, ok := ret.Get(0).(func(int) *domain.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Item)
		}
	}

	return r0
}

// GetNextId provides a mock function with given fields:
func (_m *ItemRepository) GetNextId() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ListItem provides a mock function with given fields: status
func (_m *ItemRepository) ListItem(status string) []domain.Item {
	ret := _m.Called(status)

	var r0 []domain.Item
	if rf, ok := ret.Get(0).(func(string) []domain.Item); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Item)
		}
	}

	return r0
}

// UpdateItem provides a mock function with given fields: item, id
func (_m *ItemRepository) UpdateItem(item domain.Item, id int) *domain.Item {
	ret := _m.Called(item, id)

	var r0 *domain.Item
	if rf, ok := ret.Get(0).(func(domain.Item, int) *domain.Item); ok {
		r0 = rf(item, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Item)
		}
	}

	return r0
}

type mockConstructorTestingTNewItemRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewItemRepository creates a new instance of ItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewItemRepository(t mockConstructorTestingTNewItemRepository) *ItemRepository {
	mock := &ItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
