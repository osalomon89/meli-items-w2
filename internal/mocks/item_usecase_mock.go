// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "gigigarino/challengeMELI/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItemUsecase is a mock of ItemUsecase interface.
type MockItemUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockItemUsecaseMockRecorder
}

// MockItemUsecaseMockRecorder is the mock recorder for MockItemUsecase.
type MockItemUsecaseMockRecorder struct {
	mock *MockItemUsecase
}

// NewMockItemUsecase creates a new mock instance.
func NewMockItemUsecase(ctrl *gomock.Controller) *MockItemUsecase {
	mock := &MockItemUsecase{ctrl: ctrl}
	mock.recorder = &MockItemUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemUsecase) EXPECT() *MockItemUsecaseMockRecorder {
	return m.recorder
}

// ActualizarUpdateAt mocks base method.
func (m *MockItemUsecase) ActualizarUpdateAt(arg0 *domain.Item) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ActualizarUpdateAt", arg0)
}

// ActualizarUpdateAt indicates an expected call of ActualizarUpdateAt.
func (mr *MockItemUsecaseMockRecorder) ActualizarUpdateAt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualizarUpdateAt", reflect.TypeOf((*MockItemUsecase)(nil).ActualizarUpdateAt), arg0)
}

// AddItem mocks base method.
func (m *MockItemUsecase) AddItem(arg0 domain.Item) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", arg0)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItem indicates an expected call of AddItem.
func (mr *MockItemUsecaseMockRecorder) AddItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockItemUsecase)(nil).AddItem), arg0)
}

// DeleteItem mocks base method.
func (m *MockItemUsecase) DeleteItem(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemUsecaseMockRecorder) DeleteItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemUsecase)(nil).DeleteItem), arg0)
}

// GetAllItems mocks base method.
func (m *MockItemUsecase) GetAllItems() []domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems")
	ret0, _ := ret[0].([]domain.Item)
	return ret0
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockItemUsecaseMockRecorder) GetAllItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockItemUsecase)(nil).GetAllItems))
}

// GetItemById mocks base method.
func (m *MockItemUsecase) GetItemById(arg0 int) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", arg0)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockItemUsecaseMockRecorder) GetItemById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockItemUsecase)(nil).GetItemById), arg0)
}

// GetListaInicial mocks base method.
func (m *MockItemUsecase) GetListaInicial() []domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListaInicial")
	ret0, _ := ret[0].([]domain.Item)
	return ret0
}

// GetListaInicial indicates an expected call of GetListaInicial.
func (mr *MockItemUsecaseMockRecorder) GetListaInicial() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListaInicial", reflect.TypeOf((*MockItemUsecase)(nil).GetListaInicial))
}

// Index mocks base method.
func (m *MockItemUsecase) Index() []domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].([]domain.Item)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockItemUsecaseMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockItemUsecase)(nil).Index))
}

// UpdateItem mocks base method.
func (m *MockItemUsecase) UpdateItem(arg0 domain.Item) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemUsecaseMockRecorder) UpdateItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemUsecase)(nil).UpdateItem), arg0)
}

// UpdateItemNuevo mocks base method.
func (m *MockItemUsecase) UpdateItemNuevo(arg0 domain.Item) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateItemNuevo", arg0)
}

// UpdateItemNuevo indicates an expected call of UpdateItemNuevo.
func (mr *MockItemUsecaseMockRecorder) UpdateItemNuevo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemNuevo", reflect.TypeOf((*MockItemUsecase)(nil).UpdateItemNuevo), arg0)
}

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockItemRepository) AddItem(arg0 domain.Item) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", arg0)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockItemRepositoryMockRecorder) AddItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockItemRepository)(nil).AddItem), arg0)
}

// DeleteItem mocks base method.
func (m *MockItemRepository) DeleteItem(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemRepositoryMockRecorder) DeleteItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemRepository)(nil).DeleteItem), arg0)
}

// GetAllItems mocks base method.
func (m *MockItemRepository) GetAllItems() []domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems")
	ret0, _ := ret[0].([]domain.Item)
	return ret0
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockItemRepositoryMockRecorder) GetAllItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockItemRepository)(nil).GetAllItems))
}

// GetItemById mocks base method.
func (m *MockItemRepository) GetItemById(arg0 int) *domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", arg0)
	ret0, _ := ret[0].(*domain.Item)
	return ret0
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockItemRepositoryMockRecorder) GetItemById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockItemRepository)(nil).GetItemById), arg0)
}

// GetListaInicial mocks base method.
func (m *MockItemRepository) GetListaInicial() []domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListaInicial")
	ret0, _ := ret[0].([]domain.Item)
	return ret0
}

// GetListaInicial indicates an expected call of GetListaInicial.
func (mr *MockItemRepositoryMockRecorder) GetListaInicial() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListaInicial", reflect.TypeOf((*MockItemRepository)(nil).GetListaInicial))
}

// Index mocks base method.
func (m *MockItemRepository) Index() []domain.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].([]domain.Item)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockItemRepositoryMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockItemRepository)(nil).Index))
}

// UpdateItemNuevo mocks base method.
func (m *MockItemRepository) UpdateItemNuevo(arg0 domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemNuevo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemNuevo indicates an expected call of UpdateItemNuevo.
func (mr *MockItemRepositoryMockRecorder) UpdateItemNuevo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemNuevo", reflect.TypeOf((*MockItemRepository)(nil).UpdateItemNuevo), arg0)
}
